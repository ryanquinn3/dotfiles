# config for codespaces
export GIT_EDITOR="code --wait"
export EDITOR="code --wait"
export DEV_LOG_FORMAT="json"

WC_PKG="@vanta/web-client"
# aliases
alias gt="turbo generate-types --filter @vanta/web --filter $WC_PKG"
alias gtc="turbo generate-types --filter $WC_PKG"
alias syncdot="(cd /workspaces/.codespaces/.persistedshare/dotfiles && git pull) && rz"


alias start_web="docker-compose up --detach web.internal web-client.internal"
alias rstc="restart_container"
alias rstc_w="restart_container web.internal"
alias rstc_wc="restart_container obsidian_web-client.internal_1"
alias cat="batcat"
alias docker_ps="docker ps -a --format '{{.Names}}'"
alias logs_web="docker compose logs web.internal --tail 100 --no-log-prefix"
alias logs_wc="docker compose logs web-client.internal --tail 100 --no-log-prefix"

alias pr_create="gh pr create --draft --editor --template pull_request_template.md --base main"
alias yw="nocorrect yarn workspace"

alias fd="fdfind"
# fzf
export FZF_DEFAULT_COMMAND="$SHELL -c 'fdfind --hidden --strip-cwd-prefix --exclude .git --no-ignore-vcs'"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="$SHELL -c 'fdfind --type=d --hidden --strip-cwd-prefix --exclude .git --no-ignore-vcs'"

_1LEFT="[codespace]"

# Functions
login_link(){
  json_line=$(logs_web 2>/dev/null  | \
   grep 'loginLink":' | \
   tail -n 1 )
  echo "{$json_line}" | jq -r .loginLink
}

function startc(){
  docker compose up -d "$1.internal"
}

function restart_container() {
  docker_ps | grep $1 | xargs -I {} docker restart {}
}

# new branch from main
nb(){
  # check if branch name is provided
  if [ -z "$1" ]; then
    echo "Usage: nb <branch-name>"
    return 1
  fi
  syncb && gco -b rq/$1 main
}

lint_ts(){
  files_to_lint=$(git diff HEAD --name-only --diff-filter=d | grep -E '.tsx?$')
  echo "Linting $(echo $files_to_lint | wc -l) files"
  start=`date +%s`
  npx eslint --fix $(git diff HEAD --name-only --diff-filter=d | grep -E '.tsx?$' )
  end=`date +%s`
  runtime=$((end-start))
  echo "Linted in $runtime seconds"
}

logs(){
  docker compose logs $1.internal --tail 100 --no-log-prefix $2
}

# emit a docker containers logs as json with some logic to drop annoying fields
logs_json(){
  logs "$1" "${@:2}" | jq -R '. as $line | try (fromjson | del(.dd, .networkInfo)) catch $line'
}
# Claude code boot up
clc(){
  unset GITHUB_TOKEN && unset ANTHROPIC_API_KEY && claude --dangerously-skip-permissions 
}

# check if python is /workspaces/obsidian/.venv/bin and only activate if is not
if [ "$(which python)" != "/workspaces/obsidian/.venv/bin/python" ]; then
  source /workspaces/obsidian/.venv/bin/activate
fi

function stamp(){
  if [ -z "$1" ]; then
    echo "Usage: stamp PR_NUMBER"
    return 1
  fi
   gh pr review --approve $1  
}

eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

